---
title: "Biostat 203B Homework 4"
format: html
---
Due Mar 9 @ 11:59PM

Author: Luke Hodges and 906182810

Display machine information:

```{r}
sessionInfo()
```

Display my machine memory.

```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:

```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database
Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and collect() the tibble only at the end of Q1.7.

## 1.1 Connect to BigQuery
Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do not ever add this token to your Git repository. If you do so, you will lose 50 points.

```{r}
# path to the service account token 
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"

# BigQuery authentication using service account

bq_auth(path = satoken)
```
Connect to BigQuery database mimiciv_3_1 in GCP (Google Cloud Platform), using the project billing account biostat-203b-2025-winter.

**We must now connect to the BigQuery database `biostat-203b-2025-mimiciv_3_1`**

```{r}

con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2025-winter",
    dataset = "mimiciv_3_1",
    billing = "biostat-203b-2025-winter"
)

con_bq

```

```{r}

#List all tables in the mimiciv_3_1 database.

dbListTables(con_bq)

```

## Q1.2 icustays data

Connect to the icustays table.

```{r}

icustays_tble <- tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id, stay_id) |>
  print(width = Inf)

```

## Q1.3 admissions data

Connect to `admissions` table

```{r}

admissions_tble <- tbl(con_bq, "admissions") |>
  arrange(subject_id, hadm_id) |>
  print(width = Inf)

```

## Q1.4 Retrieve Patients Table

Connect to `patients` table

```{r}

patients_tble <- tbl(con_bq, "patients") |>
  arrange(subject_id) |>
  print(width = Inf)

```
## Q1.5 labevents data

Connect to the labevents table and retrieve a subset that only contain subjects who appear in icustays_tble and the lab items listed in HW3. Only keep the last lab measurements (by storetime) before the ICU stay and pivot lab items to become variables/columns. Write all steps in one chain of pipes.

```{r}

lab_items <- c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)

labevents_tble <- tbl(con_bq, "labevents") |> 
  select(subject_id, hadm_id, storetime, itemid, charttime, valuenum) |>  
  filter(itemid %in% lab_items) |> 
  mutate(subject_id = as.integer(subject_id)) |>
  left_join(icustays_tble, by = c("subject_id")) |> 
  filter(storetime < intime) |> 
  arrange(subject_id, stay_id, itemid, desc(storetime)) |>  
  group_by(subject_id, stay_id, itemid) |>  
  filter(row_number() == 1) |>  
  ungroup() |>  
  select(subject_id, stay_id, itemid, valuenum) |>  
  pivot_wider(names_from = itemid, values_from = valuenum, 
              names_prefix = "lab_") |>  
  rename(
    Creatinine = lab_50912,
    Potassium = lab_50971,
    Sodium = lab_50983,
    Chloride = lab_50902,
    Bicarbonate = lab_50882,
    Hematocrit = lab_51221,
    WBC = lab_51301,
    Glucose = lab_50931) |>  
  select(subject_id, stay_id, Bicarbonate, Chloride, Creatinine, Glucose, 
         Potassium, Sodium, Hematocrit, WBC) |>  
  arrange(subject_id, stay_id) |>  
  print(width = Inf)
```
## Q1.6 chartevents data

```{r}

vital_items <- c(220045, 220179, 220180, 223761, 220210)

chartevents_tble <- tbl(con_bq, "chartevents") |>  
  select(subject_id, stay_id, charttime, storetime, itemid, valuenum) |>  
  filter(itemid %in% vital_items) |> 
  left_join(select(icustays_tble, subject_id, stay_id, intime, outtime), 
            by = c("subject_id", "stay_id")) |>  
  filter(storetime >= intime & storetime <= outtime) |>  
  arrange(subject_id, stay_id, itemid, storetime) |>  
  group_by(subject_id, stay_id, itemid) |>  
  filter(storetime == min(storetime)) |>  
  summarise(valuenum = mean(valuenum, na.rm = TRUE), .groups = "drop") |>  
  pivot_wider(names_from = itemid, 
              values_from = valuenum, names_prefix = "vital_") |> 
  rename(
    Heart_Rate = vital_220045,
    SysBP = vital_220179,
    DiaBP = vital_220180,
    Temp = vital_223761,
    Respiratory_Rate = vital_220210) |>  
  select(subject_id, stay_id, Heart_Rate, SysBP, DiaBP, 
         Respiratory_Rate, Temp) |>  
  arrange(subject_id, stay_id) |>  
  print(width = Inf)
```
## Q1.7 Put things together

```{r}
mimic_icu_cohort <- icustays_tble |> 
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |> 
  left_join(select(patients_tble, subject_id, gender, dod, anchor_age, 
                   anchor_year, anchor_year_group), 
            by = "subject_id") |> 
  mutate(age_intime = anchor_age + 
           (dbplyr::sql("EXTRACT(YEAR FROM intime)") - anchor_year)) |>  
  filter(age_intime >= 18) |> 
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |> 
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |> 
  select(subject_id, hadm_id, stay_id, 
         first_careunit, last_careunit, everything()) |> 
  collect() |> 
  arrange(subject_id, hadm_id, stay_id) |>
  print(width = Inf)

```

## Q1.8 Preprocessing
```{r}
# Preprocessing
mimic_icu_cohort <- mimic_icu_cohort |> 
  filter(!is.na(los)) |>  
  mutate(
    los_long = los >= 2,
    
    # Lump infrequent levels
    first_careunit = fct_lump_n(factor(first_careunit), n = 4, other_level = "Other"),
    last_careunit = fct_lump_n(factor(last_careunit), n = 4, other_level = "Other"),
    admission_type = fct_lump_n(factor(admission_type), n = 4, other_level = "Other"),
    admission_location = fct_lump_n(factor(admission_location), n = 4, other_level = "Other"),
    discharge_location = fct_lump_n(factor(discharge_location), n = 4, other_level = "Other"),

    # Collapse race levels
    race = as.character(race),
    race = case_when(
      race %in% c("ASIAN", "ASIAN - CHINESE", "ASIAN - KOREAN", 
                  "ASIAN - ASIAN INDIAN", "ASIAN - SOUTH EAST ASIAN") ~ "ASIAN",
      race %in% c("BLACK", "BLACK/AFRICAN", "BLACK/AFRICAN AMERICAN", 
                  "BLACK/CAPE VERDEAN", "BLACK/CARIBBEAN ISLAND") ~ "BLACK",
      race %in% c("HISPANIC", "HISPANIC OR LATINO", 
                  "HISPANIC/LATINO - SALVADORAN", 
                  "HISPANIC/LATINO - PUERTO RICAN",
                  "HISPANIC/LATINO - GUATEMALAN", "HISPANIC/LATINO - CUBAN", 
                  "HISPANIC/LATINO - DOMINICAN", 
                  "HISPANIC/LATINO - CENTRAL AMERICAN", 
                  "HISPANIC/LATINO - HONDURAN", "HISPANIC/LATINO - COLUMBIAN", 
                  "HISPANIC/LATINO - MEXICAN") ~ "HISPANIC",
      race %in% 
        c("WHITE", "WHITE - RUSSIAN", "WHITE - OTHER EUROPEAN", 
          "WHITE - EASTERN EUROPEAN", "WHITE - BRAZILIAN") ~ "WHITE",
      TRUE ~ "Other"),
    race = factor(race, levels = c("ASIAN", "BLACK", "HISPANIC", "WHITE", "Other")),
    
    #DOD Categories
    dod = ifelse(is.na(dod), "Unknown", "dod")
  )

# Create Summary Table
summary_table <- mimic_icu_cohort |> 
  select(
    first_careunit, last_careunit, los, admission_type, admission_location, 
    discharge_location, insurance, language, marital_status, race, 
    hospital_expire_flag, gender, dod, Bicarbonate, Chloride, Creatinine, 
    Glucose, Potassium, Sodium, Hematocrit, WBC, SysBP, DiaBP,
    Respiratory_Rate, Temp, Heart_Rate, age_intime, los_long) |>
  tbl_summary(
    by = los_long,
    statistic = list(
      all_continuous() ~ "{median} ({p25}, {p75})",
      all_categorical() ~ "{n} ({p}%)"),
    missing = "ifany") |> 
  modify_header(label = "**Characteristic**") |>  
  modify_spanning_header(c("stat_1", "stat_2") ~ "**N = {n}**") |>  
  bold_labels()

# Display Summary Table
summary_table

```

## 1.9 Save the final tibble

Save the final tibble to an R data file mimic_icu_cohort.rds in the mimiciv_shiny folder.

```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}

# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```

Close database connection and clear workspace.

```{r}
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```

Although it is not a good practice to add big data files to Git, for grading purpose, please add mimic_icu_cohort.rds to your Git repository.